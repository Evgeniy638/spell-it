{"version":3,"sources":["audio/listWords.ts","audio/index.ts","components/RingDiagram/RingDiagram.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["listWords","audio","getRandomWord","Math","floor","random","length","play","message","callback","this","stop","speechSynthesis","SpeechSynthesisUtterance","addEventListener","window","speak","cancel","playWin","playError","RingDiagram","props","prevDashoffset","arrDashoffset","elements","map","element","i","arrElements","percent","className","width","height","viewBox","aria-labelledby","role","cx","cy","r","fill","stroke","default","color","strokeWidth","name","strokeDasharray","strokeDashoffset","x","y","text","underText","aria-hidden","style","backgroundColor","App","useState","countTry","setCountTry","countWarn","setCountWarn","countError","setCountError","isFirstTry","setIsFirstTry","setText","currentWord","setCurrentWord","countRight","percentError","round","percentWarn","percentRight","next","isDecided","newWord","check","toLocaleLowerCase","value","onChange","e","target","onKeyPress","key","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea9ed925.chunk.js","sourcesContent":["export const listWords: Array<string> = [\r\n    \"Легитимность\",\r\n    \"Риелтор\",\r\n    \"Бюллетень\",\r\n    \"Дуршлаг\",\r\n    \"Гастарбайтер\",\r\n    \"Винегрет\"\r\n];\r\n","import { listWords } from './listWords';\r\n\r\nexport const audio = {\r\n    getRandomWord() {\r\n        return listWords[Math.floor(Math.random() * listWords.length)];\r\n    },\r\n    play(message: string, callback?:any) {\r\n        this.stop();\r\n        const speechSynthesis: SpeechSynthesisUtterance = new SpeechSynthesisUtterance(message);\r\n        speechSynthesis.addEventListener(\"end\", callback);\r\n        window.speechSynthesis.speak(speechSynthesis);\r\n    },\r\n    stop() {\r\n        window.speechSynthesis.cancel();\r\n    },\r\n    playWin(callback=()=>{}): void {\r\n        this.play(\"Правильно\", callback);\r\n    },\r\n    playError(callback=()=>{}): void {\r\n        this.play(\"Ошибка\", callback);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./RingDiagram.css\"\r\n\r\ninterface IElement {\r\n    name: string,\r\n    percent: number,\r\n    color: string\r\n}\r\n\r\ninterface PropsRingDiagram {\r\n    text?: string,\r\n    underText?: string,\r\n    elements: IElement[],\r\n    default: IElement\r\n}\r\n\r\nconst SHIFT_BY_RING = 25;\r\n\r\nconst RingDiagram = (props: PropsRingDiagram) => {\r\n    let prevDashoffset: number = 0;\r\n\r\n    const arrDashoffset = props.elements.map((element, i, arrElements) => {\r\n        if (i === 0) {\r\n            return SHIFT_BY_RING;\r\n        }\r\n\r\n        prevDashoffset += arrElements[i-1].percent;\r\n        return SHIFT_BY_RING - prevDashoffset;\r\n    });\r\n\r\n    return (\r\n        <figure className=\"RingDiagram\">\r\n            <div>\r\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 42 42\" className=\"RingDiagram__svg\" aria-labelledby=\"beers-title beers-desc\" role=\"img\">\r\n                    <circle \r\n                        className=\"RingDiagram__donut-ring\" \r\n                        cx=\"21\" cy=\"21\" r=\"15.91549430918954\" \r\n                        fill=\"transparent\" stroke={props.default.color} \r\n                        strokeWidth=\"3\" \r\n                        role=\"presentation\"\r\n                    >\r\n                        <title>{props.default.name} ({props.default.percent}%)</title>\r\n                    </circle>\r\n                    \r\n                    {\r\n                        props.elements.map((element, i) => (\r\n                            <circle\r\n                                key={element.name}\r\n                                className=\"RingDiagram__donut-segment\" \r\n                                cx=\"21\" cy=\"21\" r=\"15.91549430918954\" \r\n                                fill=\"transparent\" stroke={element.color} \r\n                                strokeWidth=\"3\" \r\n                                strokeDasharray={`${element.percent} ${100 - element.percent}`} \r\n                                strokeDashoffset={arrDashoffset[i]}\r\n                            >\r\n                                <title>{element.name} ({element.percent}%)</title>\r\n                            </circle>\r\n                        ))\r\n                    }\r\n\r\n                    <g className=\"RingDiagram__chart-text\">\r\n                        <text x=\"50%\" y=\"50%\" className=\"RingDiagram__chart-text-main\">\r\n                            {props.text}\r\n                        </text>\r\n                        <text x=\"50%\" y=\"50%\" className=\"RingDiagram__chart-text-under\">\r\n                            {props.underText}\r\n                        </text>\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n            <figcaption className=\"RingDiagram__key\">\r\n                <ul className=\"RingDiagram__figure-key-list\" aria-hidden=\"true\">\r\n                    {\r\n                        [props.default, ...props.elements].map(element => (\r\n                            <li \r\n                                key={element.name}\r\n                                className=\"RingDiagram__figure-key-list-item\"\r\n                            >\r\n                                <span \r\n                                    className=\"RingDiagram__shape-circle\"\r\n                                    style={{backgroundColor: element.color}}\r\n                                ></span> {element.name}\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </figcaption>\r\n        </figure>\r\n    );\r\n}\r\n\r\nexport default RingDiagram;\r\n","import React, { KeyboardEvent } from 'react';\nimport { useState } from 'react';\nimport './App.css';\nimport { audio } from './audio';\nimport RingDiagram from './components/RingDiagram/RingDiagram';\n\nfunction App() {\n    const [countTry, setCountTry] = useState(0);\n    const [countWarn, setCountWarn] = useState(0);\n    const [countError, setCountError] = useState(0);\n\n    const [isFirstTry, setIsFirstTry] = useState(true);\n\n    const [text, setText] = useState(\"\");\n    const [currentWord, setCurrentWord] = useState(\"\");\n\n    const countRight: number = countTry - countError - countWarn;\n    const percentError: number = Math.round(100 * countError / countTry);\n    const percentWarn: number = Math.floor(100 * countWarn / countTry);\n    const percentRight: number = 100 - percentError - percentWarn;\n\n    const start = () => {\n        const newWord = audio.getRandomWord();\n        setCurrentWord(newWord);\n        audio.play(newWord);\n    }\n\n    const next = (isDecided = true) => {\n        const newWord = audio.getRandomWord();\n        setCurrentWord(newWord);\n        audio.play(newWord);\n\n        setCountTry(countTry => countTry + 1);\n        setIsFirstTry(true);\n\n        if (!isDecided) {\n            setCountError(countError => countError + 1);\n        }\n    };\n\n    const check = () => {\n        if (currentWord.toLocaleLowerCase() === text.toLocaleLowerCase()) {\n            audio.playWin(() => {\n                next();\n\n                if (!isFirstTry) {\n                    setCountWarn(countWarn => countWarn + 1);\n                }\n            });\n        } else {\n            setIsFirstTry(false);\n            audio.playError();\n        }\n    }\n\n    const onKeyPress = (e: KeyboardEvent<Element>) => {\n        if (e.key === \"Enter\") {\n            check();\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App_element\">\n                {\n                    currentWord\n                        ? <>\n                            <input\n                                value={text}\n                                onChange={(e) => setText(e.target.value)}\n                                onKeyPress={onKeyPress}\n                            />\n                            <button\n                                onClick={check}\n                            >Проверить</button>\n                            <button\n                                onClick={() => audio.play(currentWord)}\n                            >Произнести слово заново</button>\n\n                            <button\n                                onClick={() => next(false)}\n                            >Пропустить слово</button>\n                        </>\n                        : <button\n                            onClick={start}\n                        >Играть</button>\n\n                }\n            </div>\n\n            {\n                countTry > 0 &&\n                <div className=\"App_element\">\n                    <RingDiagram\n                        elements={[\n                            {\n                                name: `Пропущено ${countError}/${countTry}`,\n                                percent: percentError,\n                                color: \"red\"\n                            },\n                            {\n                                name: `Решено не с первого раза ${countWarn}/${countTry}`,\n                                percent: percentWarn,\n                                color: \"yellow\"\n                            }\n                        ]}\n                        default={\n                            {\n                                name: `Правильно решено ${countRight}/${countTry}`,\n                                color: \"green\",\n                                percent: percentRight\n                            }\n                        }\n                        text={`${percentRight}%`}\n                        underText={`${countRight}/${countTry} правильно`}\n                    />\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}